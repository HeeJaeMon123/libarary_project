#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <time.h>
#include <string.h>
#include <fcntl.h>
#define MAX_USER 50
typedef struct Node {
        char name[80];
        char author[80];
        char kind[10]; //분야
}info;

typedef struct User {
    char id[20];
    char passwd[20];
}USER;
int size = 0;

USER users[MAX_USER];
USER user;

void Read_Data()
{
    FILE* fp = fopen("user.txt", "a+");
    int size, i;

    if (fp == NULL)
    {
        printf("파일을 열 수 없습니다\n");
        exit(0);
    }
    else
    {
        for (i = 0; i < 50; i++) //offset을 옮겨서 아이디와 비빌번호를 구조체 배열에 받음
        {
            fseek(fp, i * 40, SEEK_SET);
            fread(&users[i].id, 20, 1, fp);
            fread(&users[i].passwd, 20, 1, fp);
        }
    }
    fseek(fp, 0, SEEK_END);
    fclose(fp);
}

void Sign_Up() // 회원가입
{
    FILE* fp = fopen("user.txt", "a+");
    USER regi;
    char reconfirm[20];
    int i, flag;

    if (fp == NULL)
    {
        printf("파일 출력 오류\n");
        exit(0);
    }
    Read_Data();

    system("clear");
    printf("-----회원가입-----\n");
    printf("아이디: "); scanf("%s", regi.id);
    printf("비밀번호: "); scanf("%s", regi.passwd);
    printf("비밀번호 재확인: "); scanf("%s", reconfirm);
    while (1) {
        for (i = 0; i < MAX_USER; i++) {
            if (strcmp(regi.id, users[i].id) == 0) {
                printf("-----이미 등록된 아이디입니다-----\n");
                printf("아이디: "); scanf("%s", regi.id);
                printf("비밀번호: "); scanf("%s", regi.passwd);
                printf("비밀번호 재확인: "); scanf("%s", reconfirm);
            }
            else {
                flag = 1;
                break;
            }
        }
        if (flag == 1) break;

    }
    while (1) { // 재확인이 같을 때까지 반복
        if (strcmp(regi.passwd, reconfirm)) {
            printf("비밀번호를 다시 입력하세요\n");
            printf("비밀번호 재확인: ");
            scanf("%s", &reconfirm);
        }
        else break;
    }

    fseek(fp, sizeof(user), SEEK_SET);
    if (fwrite(&regi, sizeof(user), 1, fp) != 1) //입력은 아이디와 비밀번호를 파일에 저장
    {
        printf("파일 입력 오류\n");
        exit(0);
    }
    fclose(fp);
}

void login()
{
    int i, check = 0, option = 1, flag = 0;;

    while (1) {
        if (option == 1) {
            Read_Data();
            system("clear");
            printf("-----로그인-----\n");
            printf("아이디: ");
            scanf("%s", user.id);
            printf("비밀번호: ");
            scanf("%s", user.passwd);
            check = 0;
            for (i = 0; i < MAX_USER; i++)
            {
                if (strcmp(user.id, users[i].id) == 0 && strcmp(user.passwd, users[i].passwd) == 0)
                {
                    printf("로그인 성공\n");
                    flag = 1;
                    break;
                }
                check++;
            }
            if (check == 50) {
                printf("가입하지 않은 아이디이거나, 잘못된 비밀번호입니다.\n");
                printf("가입하지 않은 아이디이거나, 잘못된 비밀번호입니다.\n");
                while (1) {
                    printf("-----옵션-----\n");
                    printf("1. 로그인 다시하기\n");
                    printf("2. 회원가입하기\n");
                    printf("번호를 선택하십시오: ");
                    scanf("%d", &option);
                    if (option == 1 || option == 2) break;
                    else continue;
                }
            }
            if (flag == 1) break;
        }
        else if (option == 2) {
            Sign_Up();
            while (1) {
                system("clear");
                printf("-----회원가입 성공-----\n");
                printf("로그인을 하시려면 1을 입력하세요\n");
                printf("1 입력하기: ");
                scanf("%d", &option);
                if (option == 1) break;
            }
        }
    }
}
void print(info *n,int size) {
        info * n1 = malloc(sizeof(info)*size);
        int i;
        for (i = 0; i < size; i++) {
                n1[i] = n[i];
        }
        int l;
        for (l = 0; l < size; l++) {
                printf("%s", n1[l].name);
        }
        free(n1);
}
void sortByName(info *n, int size) {//bubble sort
        int i, j;
        info * n1 = malloc(sizeof(info)*size);
        info t;
        int k;
        for (k = 0; k < size; k++) {
                n1[k] = n[k];
        }
        for ( i = 0; i < size-1; i++) {
                for (j = 0; j < size - i - 1; j++) {
                        if (strcmp(n1[j].name, n1[j + 1].name) > 0) {
                                t = n1[j];
                                n1[j] = n1[j + 1];
                                n1[j + 1] = t;
                        }
                }
        }
        print(n1,size);
        free(n1);
}
void sortByAuthor(info *n, int size) {//bubble sort
        int i, j;
        info * n1 = malloc(sizeof(info)*size);
        info t;
        int k;
        for (k = 0; k < size; k++) {
                n1[k] = n[k];
        }
        for (i = 0; i < size; i++) {
                for (j = 0; j < size - i - 1; j++) {
                        if (strcmp(n1[j].author, n1[j + 1].author) > 0) {
                                t = n1[j];
                                n1[j] = n1[j + 1];
                                n1[j + 1] = t;
                        }
                }
        }
        print(n1, size);
        free(n1);
}
void readBook() {
        char c[80];
        printf("읽을 책 이름 : ");
        scanf("%s", c);
        int fd;
        fd = open(c, O_RDWR);
        int n;
        printf("얼마나 읽을 건가요? : ");
        scanf("%d", &n);
        lseek(fd, 0, SEEK_SET);
        char buf[80];
        int b = read(fd, buf, n);
        write(STDOUT_FILENO, buf, b);
        printf("\n");

}
void rest()
{
    int i;
    printf("휴식할 시간을 입력하세요(초단위): ");
    scanf("%d", &i);
    system("clear");
    printf("==============\n");
    printf("휴식  중......\n");
    printf("==============\n");
    sleep(i);       //i초만 큼 sleep함
}

void searchByChar(info *n, char c) {
        info find[50];
        int bufSize = 0;
        int t;
        for (t = 0; t < size; t++) {
                if (n[t].name[0] == c) {
                        find[bufSize] = n[t];
                        bufSize++;
                }
        }
        int ans;
        printf("정렬하시겠습니까?(0/1)");
        scanf("%d", &ans);
        if (ans == 1) {
                int choice;
                printf("1. 이름으로 정렬\n");
                printf("2. 저자 이름으로 정렬\n");
                scanf(" %d", &choice);
                if (choice == 1) {
                        sortByName(find, bufSize);
                }
                else {
                        sortByAuthor(find, bufSize);
                }
        }
        else {
                int t1;
                for (t1 = 0; t1 < bufSize; t1++) {
                        printf("%s", find[t1].name);
                }
        }
}
void searchByName(info *n, char *str) {
        int i,j;
        for (i = 0; i < size; i++) {
                if (!strcmp(n[i].name, str)) {
                        printf("책 이름 : %s",n[i].name);
                        printf("저자 : %s", n[i].author);
                        printf("책 종류 : %s", n[i].kind);
                }

        }

}
void searchByAuthor(info *n, char * str) {
        int i, j;
        for (i = 0; i < size; i++) {
                if (!strcmp(n[i].author, str)) {
                        printf("책 이름 : %s", n[i].name);
                        printf("저자 : %s", n[i].author);
                        printf("책 종류 : %s", n[i].kind);
                }

        }

}
void searchByKind(info *n, char * str) {
        int i, j;
        for (i = 0; i < size; i++) {
                if (!strcmp(n[i].kind, str)) {
                        printf("책 이름 : %s", n[i].name);
                        printf("저자 : %s", n[i].author);
                        printf("책 종류 : %s", n[i].kind);
                }

        }
}
void donation() // 책을 기증 받는 함수
{
    info n;
    FILE* fp = fopen("booklist", "a+");
    char name[80];
    char author[80];
    char kind[10];
    while (getchar() != '\n');
    if (fp == NULL)
    {
        printf("책 목록을 열 수 없습니다\n");
        exit(0);
    }
    else {
        printf("-----책 기증-----\n");
        printf("제목: "); 
        gets(name);
        strcat(name, "\n");
        fputs(name, fp);

        printf("저자: "); 
        gets(author);
        strcat(author, "\n");
        fputs(author, fp);

        printf("분야: "); 
        gets(kind);
        strcat(kind, "\n");
        fputs(kind, fp);
    }
}
void QandA() {
        FILE *in;
        char str[80];
        if ((in = fopen("q_and_a", "a")) == NULL)
                perror("fopen:");
        printf("질문할 내용을 작성해주세요 : ");
        gets(str);
        strcat(str, "\n");
        fputs(str, in);
        fclose(in);
}
void reservation() {
        while (getchar() != '\n');
        system("clear");
        char name[80];
        FILE* fp = fopen("reservation.txt", "a+");
        printf("예약할 책 이름 : ");
        gets(name);
        strcat(name, "\n");
        fputs(name, fp);
        printf("책이 예약되었습니다. 일주일안에 찾아가세요.\n");
}
void remainSeat() {
        srand(time(NULL));
        printf("%d개 좌석이 남았습니다.\n",((rand()%45)+1));
}


int main() {
        login();
        info inf[200];
        int p;
        for (p = 3; p > 0; p--) {
                printf("프로젝트가 %d 초 후에 시작됩니다.\n",p);
                sleep(1);
        }
        struct timeval start, end;
        gettimeofday(&start, NULL);
        char str[80];
        FILE* fin;
        fin = fopen("booklist", "r+");
        int l;
        for (l = 0; l < 65; l++) {
                fgets(str, 81, fin);
                strncpy(inf[l].name, str, sizeof(str));
                fgets(str, 81, fin);
                strncpy(inf[l].author, str, sizeof(str));
                fgets(str, 81, fin);
                strncpy(inf[l].kind, str, sizeof(str));
                size++;
        }
        int user_connection;
        printf("1. 오프라인 접속\n");
        printf("2. 과기대 앱 접속\n");
        printf("옵션을 선택해주세요. : ");
        scanf("%d", &user_connection);
        while (1) {
                if (user_connection == 1) {
                        printf("******도서관리 프로그램******\n");
                        printf("메뉴를 선택하시오\n");
                        printf("1. 책 목록 출력하기\n");
                        printf("2. 책 읽기\n");
                        printf("3. 책 기증(추가)\n");
                        printf("4. 책 검색\n");
                        printf("5. 쉬기\n");
                        printf("6. 종료\n");
                        printf("*****************************\n");
                        printf("옵션을 선택해주세요. : ");
                        int user_choice;
                        scanf("%d", &user_choice);
                        if (user_choice == 1) {
                                /* 책 목록 출력 함수 호출 */
                                system("clear");
                                printf("정렬하시겠습니까? (0/1) : ");
                                int c1;
                                scanf("%d", &c1);
                                if (c1==1) {
                                        sortByName(inf, size);
                                }
                                else {
                                        print(inf,size);
                                }
                        }
                        else if (user_choice == 2) {
                                /* 책을 읽는 함수 호출 */
                                system("clear");
                                readBook();
                        }
                        else if (user_choice == 3) {
                                /* 책을 기증하는 함수 호출 */
                                system("clear");
                                donation(inf, size);
                        }
                        else if (user_choice == 4) {
                                /* 책을 검색하는 함수 호출 */
                                system("clear");
                                printf("1. 책 이름의 첫번째 글자만으로 검색\n");
                                printf("2. full name으로 검색\n");
                                printf("3. 저자 이름으로 검색\n");
                                printf("4. 분야 별로 검색\n");
                                printf("옵션을 선택해주세요. : ");
                                int choice;
                                scanf("%d", &choice);
                                if (choice == 1) {
                                        printf("첫번째 글자를 대문자로 입력해 주세요. : ");
                                        char c;
                                        while (getchar() != '\n');
                                        scanf("%c", &c);
                                        searchByChar(inf,c);
                                }
                                else if(choice == 2) {
                                        char c[80];
                                        printf("책이름을 입력해 주세요. : ");
                                        while (getchar() != '\n');
                                        gets(c);
                                        strcat(c, "\n");
                                        searchByName(inf, c);
                                }
                                else if (choice == 3) {
                                        char c[80];
                                        printf("저자 이름을 입력해 주세요. : ");
                                        while (getchar() != '\n');
                                        gets(c);
                                        strcat(c, "\n");
                                        searchByAuthor(inf, c);
                                }
                                else {
                                        printf("책 종류를 입력해 주세요. : ");
                                        char c[80];
                                        while (getchar() != '\n');
                                        gets(c);
                                        strcat(c, "\n");
                                        searchByKind(inf, c);
                                }
                        }
                        else if (user_choice == 5) {
                                /* 쉬는 함수 호출 */
                                system("clear");
                                rest();
                        }
                        else if (user_choice == 6) {
                                /* 프로그램을 종료한다. */
                                break;
                        }
                }
                else {
                        printf("******도서관리 프로그램******\n");
                        printf("메뉴를 선택하시오\n");
                        printf("1. 앱 이용시간\n");
                        printf("2. Q&A\n");
                        printf("3. 독서실 남은 좌석수\n");
                        printf("4. 책 예약\n");
                        printf("5. 모바일 신분증\n");
                        printf("6. 종료\n");
                        printf("*****************************\n");
                        printf("옵션을 선택해주세요. : ");
                        int user_choice;
                        scanf("%d", &user_choice);
                        if (user_choice == 1) {
                                /*time 호출 */
                                gettimeofday(&end, NULL);
                                system("clear");
                                printf("%d 초 이용하셨습니다.\n", end.tv_sec - start.tv_sec);
                        }
                        else if (user_choice == 2) {
                                /* 책을 q&a 함수 호출 */
                                while (getchar() != '\n');
                                system("clear");
                                QandA();
                                //while (getchar() != '\n');
                        }
                        else if (user_choice == 3) {
                                /* 남은 좌석수 함수 호출 */
                                system("clear");
                                remainSeat();
                        }
                        else if (user_choice == 4) {
                                /* 책을 예약하는 함수 호출  예약 list를 만들자 */
                                system("clear");
                                reservation();

                        }
                        else if (user_choice == 5) {
                                system("clear");
                                printf("-------------------------------------\n");
                                printf("|                       ------      |\n");
                                printf("|   컴퓨터 공학과      |   o  |     |\n");
                                printf("|      홍 길 동        |  /|~ |     |\n");
                                printf("|     18100429         |  / / |     |\n");
                                printf("|                       ------      |\n");
                                printf("-------------------------------------\n");
                        }
                        else if (user_choice == 6) {
                                /* 프로그램을 종료한다. */
                                break;
                        }
                }
        }
        fclose(fin);
}
